; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\project\system_stm32f4xx.o --asm_dir=.\Project\ --list_dir=.\Project\ --depend=.\project\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\GPIO_Flash_Demo -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I.\RTE\_GPIO_Flash_Demo -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F411xE -DUSE_STDPERIPH_DRIVER -DSTM32F411xE --omf_browse=.\project\system_stm32f4xx.crf ..\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;469      */
;;;470    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;471    {
;;;472    /******************************************************************************/
;;;473    /*            PLL (clocked by HSE) used as System clock source                */
;;;474    /******************************************************************************/
;;;475      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;476      
;;;477      /* Enable HSE */
;;;478      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  481f              LDR      r0,|L1.132|
000006  9101              STR      r1,[sp,#4]            ;475
000008  9100              STR      r1,[sp,#0]
00000a  6802              LDR      r2,[r0,#0]
00000c  f4423280          ORR      r2,r2,#0x10000
000010  6002              STR      r2,[r0,#0]
;;;479     
;;;480      /* Wait till HSE is ready and if Time out is reached exit */
;;;481      do
;;;482      {
;;;483        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;484        StartUpCounter++;
;;;485      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f43a0          MOV      r3,#0x5000
                  |L1.22|
000016  6802              LDR      r2,[r0,#0]            ;483
000018  f4023200          AND      r2,r2,#0x20000        ;483
00001c  9200              STR      r2,[sp,#0]            ;484
00001e  9a01              LDR      r2,[sp,#4]            ;484
000020  1c52              ADDS     r2,r2,#1              ;484
000022  9201              STR      r2,[sp,#4]
000024  9a00              LDR      r2,[sp,#0]
000026  b912              CBNZ     r2,|L1.46|
000028  9a01              LDR      r2,[sp,#4]
00002a  429a              CMP      r2,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;486    
;;;487      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6802              LDR      r2,[r0,#0]
000030  0392              LSLS     r2,r2,#14
000032  d525              BPL      |L1.128|
;;;488      {
;;;489        HSEStatus = (uint32_t)0x01;
000034  2101              MOVS     r1,#1
;;;490      }
;;;491      else
;;;492      {
;;;493        HSEStatus = (uint32_t)0x00;
;;;494      }
;;;495    
;;;496      if (HSEStatus == (uint32_t)0x01)
;;;497      {
;;;498        /* Select regulator voltage output Scale 1 mode */
;;;499        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  9100              STR      r1,[sp,#0]
000038  4912              LDR      r1,|L1.132|
00003a  3140              ADDS     r1,r1,#0x40
00003c  680a              LDR      r2,[r1,#0]
00003e  f0425280          ORR      r2,r2,#0x10000000
000042  600a              STR      r2,[r1,#0]
;;;500        PWR->CR |= PWR_CR_VOS;
000044  4910              LDR      r1,|L1.136|
000046  680a              LDR      r2,[r1,#0]
000048  f4424240          ORR      r2,r2,#0xc000
00004c  600a              STR      r2,[r1,#0]
;;;501    
;;;502        /* HCLK = SYSCLK / 1*/
;;;503        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004e  490d              LDR      r1,|L1.132|
000050  3108              ADDS     r1,r1,#8
000052  680a              LDR      r2,[r1,#0]
000054  600a              STR      r2,[r1,#0]
;;;504    
;;;505    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;506        /* PCLK2 = HCLK / 2*/
;;;507        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
;;;508        
;;;509        /* PCLK1 = HCLK / 4*/
;;;510        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
;;;511    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;512    
;;;513    #if defined (STM32F401xx)
;;;514        /* PCLK2 = HCLK / 2*/
;;;515        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;516        
;;;517        /* PCLK1 = HCLK / 4*/
;;;518        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;519    #endif /* STM32F401xx */
;;;520       
;;;521        /* Configure the main PLL */
;;;522       // RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;523       //                (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;524    
;;;525        /* Enable the main PLL */
;;;526        RCC->CR |= RCC_CR_PLLON;
000056  6802              LDR      r2,[r0,#0]
000058  f0427280          ORR      r2,r2,#0x1000000
00005c  6002              STR      r2,[r0,#0]
                  |L1.94|
;;;527    
;;;528        /* Wait till the main PLL is ready */
;;;529        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00005e  6802              LDR      r2,[r0,#0]
000060  0192              LSLS     r2,r2,#6
000062  d5fc              BPL      |L1.94|
;;;530        {
;;;531        }
;;;532       
;;;533    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;534        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;535        PWR->CR |= PWR_CR_ODEN;
;;;536        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;537        {
;;;538        }
;;;539        PWR->CR |= PWR_CR_ODSWEN;
;;;540        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;541        {
;;;542        }      
;;;543        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;544        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;545    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;546    
;;;547    #if defined (STM32F40_41xxx)     
;;;548        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;549        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;550    #endif /* STM32F40_41xxx  */
;;;551    
;;;552    #if defined (STM32F401xx)
;;;553        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;554        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;555    #endif /* STM32F401xx */
;;;556    
;;;557        /* Select the main PLL as system clock source */
;;;558        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000064  6808              LDR      r0,[r1,#0]
000066  f0200003          BIC      r0,r0,#3
00006a  6008              STR      r0,[r1,#0]
;;;559        RCC->CFGR |= RCC_CFGR_SW_PLL;
00006c  6808              LDR      r0,[r1,#0]
00006e  f0400002          ORR      r0,r0,#2
000072  6008              STR      r0,[r1,#0]
                  |L1.116|
;;;560    
;;;561        /* Wait till the main PLL is used as system clock source */
;;;562        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000074  6808              LDR      r0,[r1,#0]
000076  f3c00081          UBFX     r0,r0,#2,#2
00007a  2802              CMP      r0,#2
00007c  d1fa              BNE      |L1.116|
;;;563        {
;;;564        }
;;;565      }
;;;566      else
;;;567      { /* If HSE fails to start-up, the application will have wrong clock
;;;568             configuration. User can add here some code to deal with this error */
;;;569      }
;;;570    
;;;571    }
00007e  bd0c              POP      {r2,r3,pc}
                  |L1.128|
000080  9100              STR      r1,[sp,#0]            ;493
000082  bd0c              POP      {r2,r3,pc}
;;;572    
                          ENDP

                  |L1.132|
                          DCD      0x40023800
                  |L1.136|
                          DCD      0x40007000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;413      */
;;;414    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;415    {
;;;416      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;417      
;;;418      /* Get SYSCLK source -------------------------------------------------------*/
;;;419      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4c19              LDR      r4,|L2.104|
000004  6820              LDR      r0,[r4,#0]
;;;420    
;;;421      switch (tmp)
;;;422      {
;;;423        case 0x00:  /* HSI used as system clock source */
;;;424          SystemCoreClock = HSI_VALUE;
000006  4a19              LDR      r2,|L2.108|
000008  f010010c          ANDS     r1,r0,#0xc            ;419
00000c  4818              LDR      r0,|L2.112|
00000e  d004              BEQ      |L2.26|
;;;425          break;
;;;426        case 0x04:  /* HSE used as system clock source */
;;;427          SystemCoreClock = HSE_VALUE;
000010  4d18              LDR      r5,|L2.116|
000012  2904              CMP      r1,#4                 ;421
000014  d003              BEQ      |L2.30|
000016  2908              CMP      r1,#8                 ;421
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  6002              STR      r2,[r0,#0]            ;425  ; SystemCoreClock
00001c  e01b              B        |L2.86|
                  |L2.30|
;;;428          break;
00001e  6005              STR      r5,[r0,#0]  ; SystemCoreClock
000020  e019              B        |L2.86|
                  |L2.34|
;;;429        case 0x08:  /* PLL used as system clock source */
;;;430    
;;;431          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;432             SYSCLK = PLL_VCO / PLL_P
;;;433             */    
;;;434          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4911              LDR      r1,|L2.104|
000024  1f09              SUBS     r1,r1,#4
000026  680b              LDR      r3,[r1,#0]
000028  f3c35680          UBFX     r6,r3,#22,#1
;;;435          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  680b              LDR      r3,[r1,#0]
00002e  f003033f          AND      r3,r3,#0x3f
;;;436          
;;;437          if (pllsource != 0)
000032  b116              CBZ      r6,|L2.58|
;;;438          {
;;;439            /* HSE used as PLL clock source */
;;;440            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000034  fbb5f2f3          UDIV     r2,r5,r3
000038  e001              B        |L2.62|
                  |L2.58|
;;;441          }
;;;442          else
;;;443          {
;;;444            /* HSI used as PLL clock source */
;;;445            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003a  fbb2f2f3          UDIV     r2,r2,r3
                  |L2.62|
00003e  680b              LDR      r3,[r1,#0]
;;;446          }
;;;447    
;;;448          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000040  6809              LDR      r1,[r1,#0]
000042  f3c31388          UBFX     r3,r3,#6,#9           ;445
000046  435a              MULS     r2,r3,r2              ;445
000048  f3c14101          UBFX     r1,r1,#16,#2
00004c  1c49              ADDS     r1,r1,#1
00004e  0049              LSLS     r1,r1,#1
;;;449          SystemCoreClock = pllvco/pllp;
000050  fbb2f1f1          UDIV     r1,r2,r1
000054  6001              STR      r1,[r0,#0]  ; SystemCoreClock
                  |L2.86|
;;;450          break;
;;;451        default:
;;;452          SystemCoreClock = HSI_VALUE;
;;;453          break;
;;;454      }
;;;455      /* Compute HCLK frequency --------------------------------------------------*/
;;;456      /* Get HCLK prescaler */
;;;457      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000056  6821              LDR      r1,[r4,#0]
000058  4a07              LDR      r2,|L2.120|
00005a  f3c11103          UBFX     r1,r1,#4,#4
00005e  5c51              LDRB     r1,[r2,r1]
;;;458      /* HCLK frequency */
;;;459      SystemCoreClock >>= tmp;
000060  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000062  40ca              LSRS     r2,r2,r1
000064  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;460    }
000066  bd70              POP      {r4-r6,pc}
;;;461    
                          ENDP

                  |L2.104|
                          DCD      0x40023808
                  |L2.108|
                          DCD      0x00f42400
                  |L2.112|
                          DCD      SystemCoreClock
                  |L2.116|
                          DCD      0x017d7840
                  |L2.120|
                          DCD      ||.data||

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;336      */
;;;337    void SystemInit(void)
000000  4812              LDR      r0,|L3.76|
;;;338    {
000002  b510              PUSH     {r4,lr}
;;;339      /* FPU settings ------------------------------------------------------------*/
;;;340      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;341        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;342      #endif
;;;343      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;344      /* Set HSION bit */
;;;345      RCC->CR |= (uint32_t)0x00000001;
00000c  4810              LDR      r0,|L3.80|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;346    
;;;347      /* Reset CFGR register */
;;;348      RCC->CFGR = 0x00000000;
000016  4a0e              LDR      r2,|L3.80|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;349    
;;;350      /* Reset HSEON, CSSON and PLLON bits */
;;;351      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0c              LDR      r3,|L3.84|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;352    
;;;353      /* Reset PLLCFGR register */
;;;354      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0b              LDR      r2,|L3.88|
00002a  601a              STR      r2,[r3,#0]
;;;355    
;;;356      /* Reset HSEBYP bit */
;;;357      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;358    
;;;359      /* Disable all interrupts */
;;;360      RCC->CIR = 0x00000000;
000034  4806              LDR      r0,|L3.80|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;361    
;;;362    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;363      SystemInit_ExtMemCtl(); 
;;;364    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;365             
;;;366      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;367         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;368      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;369    
;;;370      /* Configure the Vector Table location add offset address ------------------*/
;;;371    #ifdef VECT_TAB_SRAM
;;;372      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;373    #else
;;;374      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4903              LDR      r1,|L3.76|
000040  f04f6000          MOV      r0,#0x8000000
000044  3980              SUBS     r1,r1,#0x80
000046  6008              STR      r0,[r1,#0]
;;;375    #endif
;;;376    }
000048  bd10              POP      {r4,pc}
;;;377    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0xe000ed88
                  |L3.80|
                          DCD      0x40023800
                  |L3.84|
                          DCD      0xfef6ffff
                  |L3.88|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=0

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_8a444c55____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_8a444c55____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_8a444c55____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_8a444c55____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

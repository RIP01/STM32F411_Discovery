; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\project\stm32f4xx_rcc.o --asm_dir=.\Project\ --list_dir=.\Project\ --depend=.\project\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 --diag_suppress=9931 -I..\..\GPIO_Flash_Demo -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I.\RTE\_GPIO_Flash_Demo -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F411xE -DUSE_STDPERIPH_DRIVER -DSTM32F411xE --omf_browse=.\project\stm32f4xx_rcc.crf ..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockCmd PROC
;;;2103     */
;;;2104   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L1.20|
;;;2105   {
;;;2106     /* Check the parameters */
;;;2107     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;2108   
;;;2109     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2110     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2111     {
;;;2112       RCC->AHB1ENR |= RCC_AHB1Periph;
;;;2113     }
;;;2114     else
;;;2115     {
;;;2116       RCC->AHB1ENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L1.12|
000008  4301              ORRS     r1,r1,r0              ;2112
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  4381              BICS     r1,r1,r0
                  |L1.14|
00000e  6011              STR      r1,[r2,#0]            ;2112
;;;2117     }
;;;2118   }
000010  4770              BX       lr
;;;2119   
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40023830

                          AREA ||i.RCC_AHB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;2522     */
;;;2523   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L2.20|
;;;2524   {
;;;2525     /* Check the parameters */
;;;2526     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;2527     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2528     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2529     {
;;;2530       RCC->AHB1LPENR |= RCC_AHB1Periph;
;;;2531     }
;;;2532     else
;;;2533     {
;;;2534       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L2.12|
000008  4301              ORRS     r1,r1,r0              ;2530
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  4381              BICS     r1,r1,r0
                  |L2.14|
00000e  6011              STR      r1,[r2,#0]            ;2530
;;;2535     }
;;;2536   }
000010  4770              BX       lr
;;;2537   
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40023850

                          AREA ||i.RCC_AHB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphResetCmd PROC
;;;2316     */
;;;2317   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;2318   {
;;;2319     /* Check the parameters */
;;;2320     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;2321     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2322   
;;;2323     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2324     {
;;;2325       RCC->AHB1RSTR |= RCC_AHB1Periph;
;;;2326     }
;;;2327     else
;;;2328     {
;;;2329       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L3.12|
000008  4301              ORRS     r1,r1,r0              ;2325
00000a  e000              B        |L3.14|
                  |L3.12|
00000c  4381              BICS     r1,r1,r0
                  |L3.14|
00000e  6011              STR      r1,[r2,#0]            ;2325
;;;2330     }
;;;2331   }
000010  4770              BX       lr
;;;2332   
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40023810

                          AREA ||i.RCC_AHB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockCmd PROC
;;;2135     */
;;;2136   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;2137   {
;;;2138     /* Check the parameters */
;;;2139     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;2140     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2141   
;;;2142     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2143     {
;;;2144       RCC->AHB2ENR |= RCC_AHB2Periph;
;;;2145     }
;;;2146     else
;;;2147     {
;;;2148       RCC->AHB2ENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;2144
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6011              STR      r1,[r2,#0]            ;2144
;;;2149     }
;;;2150   }
000010  4770              BX       lr
;;;2151   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40023834

                          AREA ||i.RCC_AHB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;2554     */
;;;2555   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L5.20|
;;;2556   {
;;;2557     /* Check the parameters */
;;;2558     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;2559     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2560     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2561     {
;;;2562       RCC->AHB2LPENR |= RCC_AHB2Periph;
;;;2563     }
;;;2564     else
;;;2565     {
;;;2566       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L5.12|
000008  4301              ORRS     r1,r1,r0              ;2562
00000a  e000              B        |L5.14|
                  |L5.12|
00000c  4381              BICS     r1,r1,r0
                  |L5.14|
00000e  6011              STR      r1,[r2,#0]            ;2562
;;;2567     }
;;;2568   }
000010  4770              BX       lr
;;;2569   
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40023854

                          AREA ||i.RCC_AHB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphResetCmd PROC
;;;2345     */
;;;2346   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L6.20|
;;;2347   {
;;;2348     /* Check the parameters */
;;;2349     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;2350     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2351   
;;;2352     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2353     {
;;;2354       RCC->AHB2RSTR |= RCC_AHB2Periph;
;;;2355     }
;;;2356     else
;;;2357     {
;;;2358       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L6.12|
000008  4301              ORRS     r1,r1,r0              ;2354
00000a  e000              B        |L6.14|
                  |L6.12|
00000c  4381              BICS     r1,r1,r0
                  |L6.14|
00000e  6011              STR      r1,[r2,#0]            ;2354
;;;2359     }
;;;2360   }
000010  4770              BX       lr
;;;2361   
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40023814

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;2222     */
;;;2223   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;2224   {
;;;2225     /* Check the parameters */
;;;2226     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;2227     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2228   
;;;2229     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2230     {
;;;2231       RCC->APB1ENR |= RCC_APB1Periph;
;;;2232     }
;;;2233     else
;;;2234     {
;;;2235       RCC->APB1ENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L7.12|
000008  4301              ORRS     r1,r1,r0              ;2231
00000a  e000              B        |L7.14|
                  |L7.12|
00000c  4381              BICS     r1,r1,r0
                  |L7.14|
00000e  6011              STR      r1,[r2,#0]            ;2231
;;;2236     }
;;;2237   }
000010  4770              BX       lr
;;;2238   
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40023840

                          AREA ||i.RCC_APB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;2641     */
;;;2642   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L8.20|
;;;2643   {
;;;2644     /* Check the parameters */
;;;2645     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;2646     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2647     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2648     {
;;;2649       RCC->APB1LPENR |= RCC_APB1Periph;
;;;2650     }
;;;2651     else
;;;2652     {
;;;2653       RCC->APB1LPENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L8.12|
000008  4301              ORRS     r1,r1,r0              ;2649
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  4381              BICS     r1,r1,r0
                  |L8.14|
00000e  6011              STR      r1,[r2,#0]            ;2649
;;;2654     }
;;;2655   }
000010  4770              BX       lr
;;;2656   
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40023860

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;2426     */
;;;2427   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;2428   {
;;;2429     /* Check the parameters */
;;;2430     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;2431     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2432     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2433     {
;;;2434       RCC->APB1RSTR |= RCC_APB1Periph;
;;;2435     }
;;;2436     else
;;;2437     {
;;;2438       RCC->APB1RSTR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L9.12|
000008  4301              ORRS     r1,r1,r0              ;2434
00000a  e000              B        |L9.14|
                  |L9.12|
00000c  4381              BICS     r1,r1,r0
                  |L9.14|
00000e  6011              STR      r1,[r2,#0]            ;2434
;;;2439     }
;;;2440   }
000010  4770              BX       lr
;;;2441   
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40023820

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;2274     */
;;;2275   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L10.20|
;;;2276   {
;;;2277     /* Check the parameters */
;;;2278     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2279     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2280   
;;;2281     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2282     {
;;;2283       RCC->APB2ENR |= RCC_APB2Periph;
;;;2284     }
;;;2285     else
;;;2286     {
;;;2287       RCC->APB2ENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L10.12|
000008  4301              ORRS     r1,r1,r0              ;2283
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4381              BICS     r1,r1,r0
                  |L10.14|
00000e  6011              STR      r1,[r2,#0]            ;2283
;;;2288     }
;;;2289   }
000010  4770              BX       lr
;;;2290   
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40023844

                          AREA ||i.RCC_APB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;2693     */
;;;2694   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L11.20|
;;;2695   {
;;;2696     /* Check the parameters */
;;;2697     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2698     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2699     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2700     {
;;;2701       RCC->APB2LPENR |= RCC_APB2Periph;
;;;2702     }
;;;2703     else
;;;2704     {
;;;2705       RCC->APB2LPENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L11.12|
000008  4301              ORRS     r1,r1,r0              ;2701
00000a  e000              B        |L11.14|
                  |L11.12|
00000c  4381              BICS     r1,r1,r0
                  |L11.14|
00000e  6011              STR      r1,[r2,#0]            ;2701
;;;2706     }
;;;2707   }
000010  4770              BX       lr
;;;2708   
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40023864

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;2473     */
;;;2474   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L12.20|
;;;2475   {
;;;2476     /* Check the parameters */
;;;2477     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;2478     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2479     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;2480     {
;;;2481       RCC->APB2RSTR |= RCC_APB2Periph;
;;;2482     }
;;;2483     else
;;;2484     {
;;;2485       RCC->APB2RSTR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L12.12|
000008  4301              ORRS     r1,r1,r0              ;2481
00000a  e000              B        |L12.14|
                  |L12.12|
00000c  4381              BICS     r1,r1,r0
                  |L12.14|
00000e  6011              STR      r1,[r2,#0]            ;2481
;;;2486     }
;;;2487   }
000010  4770              BX       lr
;;;2488   
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40023824

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;338      */
;;;339    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4903              LDR      r1,|L13.16|
;;;340    {
;;;341      uint32_t tmpreg = 0;
;;;342      /* Check the parameters */
;;;343      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;344    
;;;345      tmpreg = RCC->CR;
000002  680a              LDR      r2,[r1,#0]
;;;346    
;;;347      /* Clear HSITRIM[4:0] bits */
;;;348      tmpreg &= ~RCC_CR_HSITRIM;
000004  f02202f8          BIC      r2,r2,#0xf8
;;;349    
;;;350      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;351      tmpreg |= (uint32_t)HSICalibrationValue << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;352    
;;;353      /* Store the new value */
;;;354      RCC->CR = tmpreg;
00000c  6008              STR      r0,[r1,#0]
;;;355    }
00000e  4770              BX       lr
;;;356    
                          ENDP

                  |L13.16|
                          DCD      0x40023800

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1518     */
;;;1519   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L14.8|
;;;1520   {
;;;1521     /* Check the parameters */
;;;1522     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1523     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1524   }
000004  4770              BX       lr
;;;1525   
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x42470e40

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;3111     */
;;;3112   void RCC_ClearFlag(void)
000000  4802              LDR      r0,|L15.12|
;;;3113   {
;;;3114     /* Set RMVF bit to clear the reset flags */
;;;3115     RCC->CSR |= RCC_CSR_RMVF;
000002  6801              LDR      r1,[r0,#0]
000004  f0417180          ORR      r1,r1,#0x1000000
000008  6001              STR      r1,[r0,#0]
;;;3116   }
00000a  4770              BX       lr
;;;3117   
                          ENDP

                  |L15.12|
                          DCD      0x40023874

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;3165     */
;;;3166   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L16.8|
;;;3167   {
;;;3168     /* Check the parameters */
;;;3169     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;3170   
;;;3171     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;3172        pending bits */
;;;3173     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7008              STRB     r0,[r1,#0]
;;;3174   }
000004  4770              BX       lr
;;;3175   
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x4002380e

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;878      */
;;;879    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L17.8|
;;;880    {
;;;881      /* Check the parameters */
;;;882      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;883      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;884    }
000004  4770              BX       lr
;;;885    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x42470000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;224      */
;;;225    void RCC_DeInit(void)
000000  480f              LDR      r0,|L18.64|
;;;226    {
;;;227      /* Set HSION bit */
;;;228      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;229    
;;;230      /* Reset CFGR register */
;;;231      RCC->CFGR = 0x00000000;
00000a  4a0d              LDR      r2,|L18.64|
00000c  2100              MOVS     r1,#0
00000e  3208              ADDS     r2,r2,#8
000010  6011              STR      r1,[r2,#0]
;;;232    
;;;233      /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
;;;234      RCC->CR &= (uint32_t)0xEAF6FFFF;
000012  6802              LDR      r2,[r0,#0]
000014  4b0b              LDR      r3,|L18.68|
000016  401a              ANDS     r2,r2,r3
000018  6002              STR      r2,[r0,#0]
;;;235      
;;;236      /* Reset PLLCFGR register */
;;;237      RCC->PLLCFGR = 0x24003010;
00001a  1d03              ADDS     r3,r0,#4
00001c  4a0a              LDR      r2,|L18.72|
00001e  601a              STR      r2,[r3,#0]
;;;238    
;;;239    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
;;;240      /* Reset PLLI2SCFGR register */
;;;241      RCC->PLLI2SCFGR = 0x20003000;
000020  4b07              LDR      r3,|L18.64|
000022  4a0a              LDR      r2,|L18.76|
000024  3384              ADDS     r3,r3,#0x84
000026  601a              STR      r2,[r3,#0]
;;;242    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */
;;;243    
;;;244    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
;;;245      /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
;;;246      RCC->PLLSAICFGR = 0x24003000;
;;;247    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;248      
;;;249      /* Reset HSEBYP bit */
;;;250      RCC->CR &= (uint32_t)0xFFFBFFFF;
000028  6802              LDR      r2,[r0,#0]
00002a  f4222280          BIC      r2,r2,#0x40000
00002e  6002              STR      r2,[r0,#0]
;;;251    
;;;252      /* Disable all interrupts */
;;;253      RCC->CIR = 0x00000000;
000030  4803              LDR      r0,|L18.64|
000032  300c              ADDS     r0,r0,#0xc
000034  6001              STR      r1,[r0,#0]
;;;254    
;;;255      /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
;;;256      RCC->DCKCFGR = 0x00000000;
000036  4802              LDR      r0,|L18.64|
000038  308c              ADDS     r0,r0,#0x8c
00003a  6001              STR      r1,[r0,#0]
;;;257      
;;;258    #if defined(STM32F410xx) || defined(STM32F413_423xx)
;;;259      /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
;;;260      RCC->DCKCFGR2 = 0x00000000;
;;;261    #endif /* STM32F410xx || STM32F413_423xx */  
;;;262    }
00003c  4770              BX       lr
;;;263    
                          ENDP

00003e  0000              DCW      0x0000
                  |L18.64|
                          DCD      0x40023800
                  |L18.68|
                          DCD      0xeaf6ffff
                  |L18.72|
                          DCD      0x24003010
                  |L18.76|
                          DCD      0x20003000

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;1316     */
;;;1317   void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b570              PUSH     {r4-r6,lr}
;;;1318   {
;;;1319     uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;1320   #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
;;;1321     uint32_t pllr = 2;
;;;1322   #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;1323     
;;;1324     /* Get SYSCLK source -------------------------------------------------------*/
;;;1325     tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4a20              LDR      r2,|L19.132|
000004  6811              LDR      r1,[r2,#0]
;;;1326     
;;;1327     switch (tmp)
;;;1328     {
;;;1329     case 0x00:  /* HSI used as system clock source */
;;;1330       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000006  4c20              LDR      r4,|L19.136|
000008  f011010c          ANDS     r1,r1,#0xc            ;1325
00000c  d004              BEQ      |L19.24|
;;;1331       break;
;;;1332     case 0x04:  /* HSE used as system clock  source */
;;;1333       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
00000e  4e1f              LDR      r6,|L19.140|
000010  2904              CMP      r1,#4                 ;1327
000012  d003              BEQ      |L19.28|
000014  2908              CMP      r1,#8                 ;1327
000016  d003              BEQ      |L19.32|
                  |L19.24|
000018  6004              STR      r4,[r0,#0]            ;1331
00001a  e01b              B        |L19.84|
                  |L19.28|
;;;1334       break;
00001c  6006              STR      r6,[r0,#0]
00001e  e019              B        |L19.84|
                  |L19.32|
;;;1335     case 0x08:  /* PLL P used as system clock  source */
;;;1336       
;;;1337       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1338       SYSCLK = PLL_VCO / PLLP
;;;1339       */    
;;;1340       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000020  4918              LDR      r1,|L19.132|
000022  1f09              SUBS     r1,r1,#4
000024  680b              LDR      r3,[r1,#0]
000026  f3c35580          UBFX     r5,r3,#22,#1
;;;1341       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002a  680b              LDR      r3,[r1,#0]
00002c  f003033f          AND      r3,r3,#0x3f
;;;1342       
;;;1343       if (pllsource != 0)
000030  b115              CBZ      r5,|L19.56|
;;;1344       {
;;;1345         /* HSE used as PLL clock source */
;;;1346         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000032  fbb6f3f3          UDIV     r3,r6,r3
000036  e001              B        |L19.60|
                  |L19.56|
;;;1347       }
;;;1348       else
;;;1349       {
;;;1350         /* HSI used as PLL clock source */
;;;1351         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000038  fbb4f3f3          UDIV     r3,r4,r3
                  |L19.60|
00003c  680c              LDR      r4,[r1,#0]
;;;1352       }
;;;1353       
;;;1354       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
00003e  6809              LDR      r1,[r1,#0]
000040  f3c41488          UBFX     r4,r4,#6,#9           ;1351
000044  4363              MULS     r3,r4,r3              ;1351
000046  f3c14101          UBFX     r1,r1,#16,#2
00004a  1c49              ADDS     r1,r1,#1
00004c  0049              LSLS     r1,r1,#1
;;;1355       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
00004e  fbb3f1f1          UDIV     r1,r3,r1
000052  6001              STR      r1,[r0,#0]
                  |L19.84|
;;;1356       break;
;;;1357   
;;;1358   #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;1359     case 0x0C:  /* PLL R used as system clock  source */
;;;1360       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1361       SYSCLK = PLL_VCO / PLLR
;;;1362       */    
;;;1363       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;1364       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;1365       
;;;1366       if (pllsource != 0)
;;;1367       {
;;;1368         /* HSE used as PLL clock source */
;;;1369         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;1370       }
;;;1371       else
;;;1372       {
;;;1373         /* HSI used as PLL clock source */
;;;1374         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;1375       }
;;;1376       
;;;1377       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;1378       RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
;;;1379       break;
;;;1380   #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;1381       
;;;1382     default:
;;;1383       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
;;;1384       break;
;;;1385     }
;;;1386     /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;1387     
;;;1388     /* Get HCLK prescaler */
;;;1389     tmp = RCC->CFGR & RCC_CFGR_HPRE;
000054  6811              LDR      r1,[r2,#0]
;;;1390     tmp = tmp >> 4;
;;;1391     presc = APBAHBPrescTable[tmp];
;;;1392     /* HCLK clock frequency */
;;;1393     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
;;;1394   
;;;1395     /* Get PCLK1 prescaler */
;;;1396     tmp = RCC->CFGR & RCC_CFGR_PPRE1;
;;;1397     tmp = tmp >> 10;
;;;1398     presc = APBAHBPrescTable[tmp];
;;;1399     /* PCLK1 clock frequency */
;;;1400     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1401   
;;;1402     /* Get PCLK2 prescaler */
;;;1403     tmp = RCC->CFGR & RCC_CFGR_PPRE2;
;;;1404     tmp = tmp >> 13;
;;;1405     presc = APBAHBPrescTable[tmp];
;;;1406     /* PCLK2 clock frequency */
;;;1407     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1408   }
000056  230f              MOVS     r3,#0xf
000058  ea031111          AND      r1,r3,r1,LSR #4
00005c  4b0c              LDR      r3,|L19.144|
00005e  5c5c              LDRB     r4,[r3,r1]            ;1391
000060  6801              LDR      r1,[r0,#0]            ;1393
000062  40e1              LSRS     r1,r1,r4              ;1393
000064  6041              STR      r1,[r0,#4]            ;1396
000066  6814              LDR      r4,[r2,#0]            ;1396
000068  2507              MOVS     r5,#7
00006a  ea052494          AND      r4,r5,r4,LSR #10
00006e  5d1c              LDRB     r4,[r3,r4]            ;1398
000070  fa21f404          LSR      r4,r1,r4              ;1400
000074  6084              STR      r4,[r0,#8]            ;1403
000076  6812              LDR      r2,[r2,#0]            ;1403
000078  ea053252          AND      r2,r5,r2,LSR #13
00007c  5c9a              LDRB     r2,[r3,r2]            ;1405
00007e  40d1              LSRS     r1,r1,r2              ;1407
000080  60c1              STR      r1,[r0,#0xc]          ;1407
000082  bd70              POP      {r4-r6,pc}
;;;1409   
                          ENDP

                  |L19.132|
                          DCD      0x40023808
                  |L19.136|
                          DCD      0x00f42400
                  |L19.140|
                          DCD      0x017d7840
                  |L19.144|
                          DCD      ||.data||

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;3066     */
;;;3067   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  4602              MOV      r2,r0
;;;3068   {
;;;3069     uint32_t tmp = 0;
;;;3070     uint32_t statusreg = 0;
;;;3071     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;3072   
;;;3073     /* Check the parameters */
;;;3074     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;3075   
;;;3076     /* Get the RCC register index */
;;;3077     tmp = RCC_FLAG >> 5;
000004  0951              LSRS     r1,r2,#5
;;;3078     if (tmp == 1)               /* The flag to check is in CR register */
000006  2901              CMP      r1,#1
000008  d00b              BEQ      |L20.34|
;;;3079     {
;;;3080       statusreg = RCC->CR;
;;;3081     }
;;;3082     else if (tmp == 2)          /* The flag to check is in BDCR register */
00000a  2902              CMP      r1,#2
00000c  d00c              BEQ      |L20.40|
;;;3083     {
;;;3084       statusreg = RCC->BDCR;
;;;3085     }
;;;3086     else                       /* The flag to check is in CSR register */
;;;3087     {
;;;3088       statusreg = RCC->CSR;
00000e  4908              LDR      r1,|L20.48|
                  |L20.16|
000010  6809              LDR      r1,[r1,#0]            ;3084
;;;3089     }
;;;3090   
;;;3091     /* Get the flag position */
;;;3092     tmp = RCC_FLAG & FLAG_MASK;
000012  f002021f          AND      r2,r2,#0x1f
;;;3093     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000016  2301              MOVS     r3,#1
000018  4093              LSLS     r3,r3,r2
00001a  420b              TST      r3,r1
00001c  d000              BEQ      |L20.32|
;;;3094     {
;;;3095       bitstatus = SET;
00001e  2001              MOVS     r0,#1
                  |L20.32|
;;;3096     }
;;;3097     else
;;;3098     {
;;;3099       bitstatus = RESET;
;;;3100     }
;;;3101     /* Return the flag status */
;;;3102     return bitstatus;
;;;3103   }
000020  4770              BX       lr
                  |L20.34|
000022  4903              LDR      r1,|L20.48|
000024  3974              SUBS     r1,r1,#0x74           ;3080
000026  e7f3              B        |L20.16|
                  |L20.40|
000028  4901              LDR      r1,|L20.48|
00002a  1f09              SUBS     r1,r1,#4              ;3084
00002c  e7f0              B        |L20.16|
;;;3104   
                          ENDP

00002e  0000              DCW      0x0000
                  |L20.48|
                          DCD      0x40023874

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;3131     */
;;;3132   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4a03              LDR      r2,|L21.16|
;;;3133   {
000002  4601              MOV      r1,r0
;;;3134     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;3135   
;;;3136     /* Check the parameters */
;;;3137     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;3138   
;;;3139     /* Check the status of the specified RCC interrupt */
;;;3140     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L21.14|
;;;3141     {
;;;3142       bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L21.14|
;;;3143     }
;;;3144     else
;;;3145     {
;;;3146       bitstatus = RESET;
;;;3147     }
;;;3148     /* Return the RCC_IT status */
;;;3149     return  bitstatus;
;;;3150   }
00000e  4770              BX       lr
;;;3151   
                          ENDP

                  |L21.16|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;1177     */
;;;1178   uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L22.12|
;;;1179   {
;;;1180     return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;1181   }
000008  4770              BX       lr
;;;1182   
                          ENDP

00000a  0000              DCW      0x0000
                  |L22.12|
                          DCD      0x40023808

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;1202     */
;;;1203   void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4a03              LDR      r2,|L23.16|
;;;1204   {
;;;1205     uint32_t tmpreg = 0;
;;;1206     
;;;1207     /* Check the parameters */
;;;1208     assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;1209   
;;;1210     tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1211   
;;;1212     /* Clear HPRE[3:0] bits */
;;;1213     tmpreg &= ~RCC_CFGR_HPRE;
000004  f02101f0          BIC      r1,r1,#0xf0
;;;1214   
;;;1215     /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;1216     tmpreg |= RCC_SYSCLK;
000008  4301              ORRS     r1,r1,r0
;;;1217   
;;;1218     /* Store the new value */
;;;1219     RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;1220   }
00000c  4770              BX       lr
;;;1221   
                          ENDP

00000e  0000              DCW      0x0000
                  |L23.16|
                          DCD      0x40023808

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;283      */
;;;284    void RCC_HSEConfig(uint8_t RCC_HSE)
000000  4902              LDR      r1,|L24.12|
;;;285    {
;;;286      /* Check the parameters */
;;;287      assert_param(IS_RCC_HSE(RCC_HSE));
;;;288    
;;;289      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;290      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;291    
;;;292      /* Set the new HSE configuration -------------------------------------------*/
;;;293      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
000006  7008              STRB     r0,[r1,#0]
;;;294    }
000008  4770              BX       lr
;;;295    
                          ENDP

00000a  0000              DCW      0x0000
                  |L24.12|
                          DCD      0x40023802

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;374      */
;;;375    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;376    {
;;;377      /* Check the parameters */
;;;378      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;379    
;;;380      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;381    }
000004  4770              BX       lr
;;;382    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x42470000

                          AREA ||i.RCC_I2SCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_I2SCLKConfig PROC
;;;1706     */
;;;1707   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000000  4901              LDR      r1,|L26.8|
;;;1708   {
;;;1709     /* Check the parameters */
;;;1710     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1711   
;;;1712     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
000002  f8c1015c          STR      r0,[r1,#0x15c]
;;;1713   }
000006  4770              BX       lr
;;;1714   #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F469_479xx */
                          ENDP

                  |L26.8|
                          DCD      0x42470000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;3029     */
;;;3030   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L27.20|
;;;3031   {
;;;3032     /* Check the parameters */
;;;3033     assert_param(IS_RCC_IT(RCC_IT));
;;;3034     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;3035     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;3036     {
;;;3037       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;3038       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
;;;3039     }
;;;3040     else
;;;3041     {
;;;3042       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;3043       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000004  7811              LDRB     r1,[r2,#0]
000006  d001              BEQ      |L27.12|
000008  4301              ORRS     r1,r1,r0              ;3038
00000a  e000              B        |L27.14|
                  |L27.12|
00000c  4381              BICS     r1,r1,r0
                  |L27.14|
00000e  7011              STRB     r1,[r2,#0]            ;3038
;;;3044     }
;;;3045   }
000010  4770              BX       lr
;;;3046   
                          ENDP

000012  0000              DCW      0x0000
                  |L27.20|
                          DCD      0x4002380d

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;399      */
;;;400    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  4905              LDR      r1,|L28.24|
;;;401    {
;;;402      /* Check the parameters */
;;;403      assert_param(IS_RCC_LSE(RCC_LSE));
;;;404    
;;;405      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;406      /* Reset LSEON bit */
;;;407      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;408    
;;;409      /* Reset LSEBYP bit */
;;;410      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  700a              STRB     r2,[r1,#0]
;;;411    
;;;412      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;413      switch (RCC_LSE)
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L28.18|
00000c  2804              CMP      r0,#4
00000e  d101              BNE      |L28.20|
;;;414      {
;;;415        case RCC_LSE_ON:
;;;416          /* Set LSEON bit */
;;;417          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
;;;418          break;
;;;419        case RCC_LSE_Bypass:
;;;420          /* Set LSEBYP and LSEON bits */
;;;421          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
000010  2005              MOVS     r0,#5
                  |L28.18|
000012  7008              STRB     r0,[r1,#0]
                  |L28.20|
;;;422          break;
;;;423        default:
;;;424          break;
;;;425      }
;;;426    }
000014  4770              BX       lr
;;;427    
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      0x40023870

                          AREA ||i.RCC_LSEModeConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEModeConfig PROC
;;;2717     */
;;;2718   void RCC_LSEModeConfig(uint8_t RCC_Mode)
000000  4905              LDR      r1,|L29.24|
;;;2719   {
;;;2720     /* Check the parameters */
;;;2721     assert_param(IS_RCC_LSE_MODE(RCC_Mode));
;;;2722     
;;;2723     if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
000002  2801              CMP      r0,#1
;;;2724     {
;;;2725       SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
;;;2726     }
;;;2727     else
;;;2728     {
;;;2729       CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
000004  6808              LDR      r0,[r1,#0]
000006  d003              BEQ      |L29.16|
000008  f0200008          BIC      r0,r0,#8
                  |L29.12|
00000c  6008              STR      r0,[r1,#0]            ;2725
;;;2730     }
;;;2731   }
00000e  4770              BX       lr
                  |L29.16|
000010  f0400008          ORR      r0,r0,#8              ;2725
000014  e7fa              B        |L29.12|
;;;2732   
                          ENDP

000016  0000              DCW      0x0000
                  |L29.24|
                          DCD      0x40023870

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;439      */
;;;440    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L30.8|
;;;441    {
;;;442      /* Check the parameters */
;;;443      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;444    
;;;445      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;446    }
000004  4770              BX       lr
;;;447    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x42470e80

                          AREA ||i.RCC_LTDCCLKDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_LTDCCLKDivConfig PROC
;;;1933     */
;;;1934   void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
000000  4a03              LDR      r2,|L31.16|
;;;1935   {
;;;1936     uint32_t tmpreg = 0;
;;;1937     
;;;1938     /* Check the parameters */
;;;1939     assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
;;;1940     
;;;1941     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1942   
;;;1943     /* Clear PLLSAIDIVR[2:0] bits */
;;;1944     tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
000004  f4213140          BIC      r1,r1,#0x30000
;;;1945   
;;;1946     /* Set PLLSAIDIVR values */
;;;1947     tmpreg |= RCC_PLLSAIDivR;
000008  4301              ORRS     r1,r1,r0
;;;1948   
;;;1949     /* Store the new value */
;;;1950     RCC->DCKCFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;1951   }
00000c  4770              BX       lr
;;;1952   
                          ENDP

00000e  0000              DCW      0x0000
                  |L31.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_MCO1Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO1Config PROC
;;;903      */
;;;904    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000000  4a03              LDR      r2,|L32.16|
;;;905    {
;;;906      uint32_t tmpreg = 0;
;;;907      
;;;908      /* Check the parameters */
;;;909      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;910      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;911    
;;;912      tmpreg = RCC->CFGR;
000002  6813              LDR      r3,[r2,#0]
;;;913    
;;;914      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;915      tmpreg &= CFGR_MCO1_RESET_MASK;
;;;916    
;;;917      /* Select MCO1 clock source and prescaler */
;;;918      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
000004  4308              ORRS     r0,r0,r1
000006  f02363ec          BIC      r3,r3,#0x7600000      ;915
00000a  4318              ORRS     r0,r0,r3
;;;919      
;;;920      /* Store the new value */
;;;921      RCC->CFGR = tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;922    
;;;923    #if defined(STM32F410xx)
;;;924      RCC_MCO1Cmd(ENABLE);
;;;925    #endif /* STM32F410xx */   
;;;926    }
00000e  4770              BX       lr
;;;927    
                          ENDP

                  |L32.16|
                          DCD      0x40023808

                          AREA ||i.RCC_MCO2Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO2Config PROC
;;;948      */
;;;949    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000000  4a03              LDR      r2,|L33.16|
;;;950    {
;;;951      uint32_t tmpreg = 0;
;;;952      
;;;953      /* Check the parameters */
;;;954      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;955      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;956      
;;;957      tmpreg = RCC->CFGR;
000002  6813              LDR      r3,[r2,#0]
;;;958      
;;;959      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;960      tmpreg &= CFGR_MCO2_RESET_MASK;
;;;961    
;;;962      /* Select MCO2 clock source and prescaler */
;;;963      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
000004  4308              ORRS     r0,r0,r1
000006  f0234378          BIC      r3,r3,#0xf8000000     ;960
00000a  4318              ORRS     r0,r0,r3
;;;964      
;;;965      /* Store the new value */
;;;966      RCC->CFGR = tmpreg;
00000c  6010              STR      r0,[r2,#0]
;;;967    
;;;968    #if defined(STM32F410xx)
;;;969      RCC_MCO2Cmd(ENABLE);
;;;970    #endif /* STM32F410xx */   
;;;971    }
00000e  4770              BX       lr
;;;972    
                          ENDP

                  |L33.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;1233     */
;;;1234   void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4a03              LDR      r2,|L34.16|
;;;1235   {
;;;1236     uint32_t tmpreg = 0;
;;;1237   
;;;1238     /* Check the parameters */
;;;1239     assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;1240   
;;;1241     tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1242   
;;;1243     /* Clear PPRE1[2:0] bits */
;;;1244     tmpreg &= ~RCC_CFGR_PPRE1;
000004  f42151e0          BIC      r1,r1,#0x1c00
;;;1245   
;;;1246     /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;1247     tmpreg |= RCC_HCLK;
000008  4301              ORRS     r1,r1,r0
;;;1248   
;;;1249     /* Store the new value */
;;;1250     RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;1251   }
00000c  4770              BX       lr
;;;1252   
                          ENDP

00000e  0000              DCW      0x0000
                  |L34.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;1264     */
;;;1265   void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4903              LDR      r1,|L35.16|
;;;1266   {
;;;1267     uint32_t tmpreg = 0;
;;;1268   
;;;1269     /* Check the parameters */
;;;1270     assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;1271   
;;;1272     tmpreg = RCC->CFGR;
000002  680a              LDR      r2,[r1,#0]
;;;1273   
;;;1274     /* Clear PPRE2[2:0] bits */
;;;1275     tmpreg &= ~RCC_CFGR_PPRE2;
000004  f4224260          BIC      r2,r2,#0xe000
;;;1276   
;;;1277     /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;1278     tmpreg |= RCC_HCLK << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;1279   
;;;1280     /* Store the new value */
;;;1281     RCC->CFGR = tmpreg;
00000c  6008              STR      r0,[r1,#0]
;;;1282   }
00000e  4770              BX       lr
;;;1283   
                          ENDP

                  |L35.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;562      */
;;;563    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L36.8|
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;567      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;568    }
000004  4770              BX       lr
;;;569    
                          ENDP

000006  0000              DCW      0x0000
                  |L36.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;538      */
;;;539    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
000000  ea411182          ORR      r1,r1,r2,LSL #6
;;;540    {
;;;541      /* Check the parameters */
;;;542      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;543      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;544      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;545      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;546      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;547    
;;;548      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
000004  085a              LSRS     r2,r3,#1
000006  b510              PUSH     {r4,lr}               ;540
000008  4b05              LDR      r3,|L37.32|
00000a  9c02              LDR      r4,[sp,#8]
00000c  eb034202          ADD      r2,r3,r2,LSL #16
000010  4311              ORRS     r1,r1,r2
000012  4301              ORRS     r1,r1,r0
000014  ea416004          ORR      r0,r1,r4,LSL #24
000018  4902              LDR      r1,|L37.36|
00001a  6008              STR      r0,[r1,#0]
;;;549                     (PLLQ << 24);
;;;550    }
00001c  bd10              POP      {r4,pc}
;;;551    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
                          ENDP

00001e  0000              DCW      0x0000
                  |L37.32|
                          DCD      0xffff0000
                  |L37.36|
                          DCD      0x40023804

                          AREA ||i.RCC_PLLI2SCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SCmd PROC
;;;731      */
;;;732    void RCC_PLLI2SCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L38.8|
;;;733    {
;;;734      /* Check the parameters */
;;;735      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;736      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000002  6688              STR      r0,[r1,#0x68]
;;;737    }
000004  4770              BX       lr
;;;738    
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLI2SConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SConfig PROC
;;;630      */
;;;631    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
000000  0180              LSLS     r0,r0,#6
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;635      assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
;;;636      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;637    
;;;638      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
000002  ea407001          ORR      r0,r0,r1,LSL #28
000006  4902              LDR      r1,|L39.16|
000008  4310              ORRS     r0,r0,r2
00000a  6008              STR      r0,[r1,#0]
;;;639    }
00000c  4770              BX       lr
;;;640    #endif /* STM32F411xE */
                          ENDP

00000e  0000              DCW      0x0000
                  |L39.16|
                          DCD      0x40023884

                          AREA ||i.RCC_PLLSAICmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAICmd PROC
;;;860      */
;;;861    void RCC_PLLSAICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L40.8|
;;;862    {
;;;863      /* Check the parameters */
;;;864      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;865      *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
000002  6708              STR      r0,[r1,#0x70]
;;;866    }
000004  4770              BX       lr
;;;867    
                          ENDP

000006  0000              DCW      0x0000
                  |L40.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLSAIConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAIConfig PROC
;;;840      */
;;;841    void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
000000  0180              LSLS     r0,r0,#6
;;;842    {
;;;843      /* Check the parameters */
;;;844      assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
;;;845      assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
;;;846      assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
;;;847      
;;;848      RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
000002  ea406001          ORR      r0,r0,r1,LSL #24
000006  4902              LDR      r1,|L41.16|
000008  ea407002          ORR      r0,r0,r2,LSL #28
00000c  6008              STR      r0,[r1,#0]
;;;849    }
00000e  4770              BX       lr
;;;850    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
                          ENDP

                  |L41.16|
                          DCD      0x40023888

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;1501     */
;;;1502   void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L42.8|
;;;1503   {
;;;1504     /* Check the parameters */
;;;1505     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1506   
;;;1507     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1508   }
000004  4770              BX       lr
;;;1509   
                          ENDP

000006  0000              DCW      0x0000
                  |L42.8|
                          DCD      0x42470e3c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;1469     */
;;;1470   void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  f3c02101          UBFX     r1,r0,#8,#2
;;;1471   {
;;;1472     uint32_t tmpreg = 0;
;;;1473   
;;;1474     /* Check the parameters */
;;;1475     assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;1476   
;;;1477     if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000004  2903              CMP      r1,#3
000006  d107              BNE      |L43.24|
;;;1478     { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;1479       tmpreg = RCC->CFGR;
000008  4a07              LDR      r2,|L43.40|
00000a  6811              LDR      r1,[r2,#0]
;;;1480   
;;;1481       /* Clear RTCPRE[4:0] bits */
;;;1482       tmpreg &= ~RCC_CFGR_RTCPRE;
00000c  f42113f8          BIC      r3,r1,#0x1f0000
;;;1483   
;;;1484       /* Configure HSE division factor for RTC clock */
;;;1485       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
000010  4906              LDR      r1,|L43.44|
000012  4001              ANDS     r1,r1,r0
000014  4319              ORRS     r1,r1,r3
;;;1486   
;;;1487       /* Store the new value */
;;;1488       RCC->CFGR = tmpreg;
000016  6011              STR      r1,[r2,#0]
                  |L43.24|
;;;1489     }
;;;1490       
;;;1491     /* Select the RTC clock source */
;;;1492     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
000018  4903              LDR      r1,|L43.40|
00001a  3168              ADDS     r1,r1,#0x68
00001c  680a              LDR      r2,[r1,#0]
00001e  f3c0000b          UBFX     r0,r0,#0,#12
000022  4302              ORRS     r2,r2,r0
000024  600a              STR      r2,[r1,#0]
;;;1493   }
000026  4770              BX       lr
;;;1494   
                          ENDP

                  |L43.40|
                          DCD      0x40023808
                  |L43.44|
                          DCD      0x0ffffcff

                          AREA ||i.RCC_SAIPLLI2SClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLI2SClkDivConfig PROC
;;;1802     */
;;;1803   void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
000000  4a03              LDR      r2,|L44.16|
;;;1804   {
;;;1805     uint32_t tmpreg = 0;
;;;1806     
;;;1807     /* Check the parameters */
;;;1808     assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
;;;1809     
;;;1810     tmpreg = RCC->DCKCFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1811   
;;;1812     /* Clear PLLI2SDIVQ[4:0] bits */
;;;1813     tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
000004  1e40              SUBS     r0,r0,#1
000006  f021011f          BIC      r1,r1,#0x1f
;;;1814   
;;;1815     /* Set PLLI2SDIVQ values */
;;;1816     tmpreg |= (RCC_PLLI2SDivQ - 1);
00000a  4301              ORRS     r1,r1,r0
;;;1817   
;;;1818     /* Store the new value */
;;;1819     RCC->DCKCFGR = tmpreg;
00000c  6011              STR      r1,[r2,#0]
;;;1820   }
00000e  4770              BX       lr
;;;1821   
                          ENDP

                  |L44.16|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLSAIClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLSAIClkDivConfig PROC
;;;1834     */
;;;1835   void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
000000  4905              LDR      r1,|L45.24|
;;;1836   {
;;;1837     uint32_t tmpreg = 0;
;;;1838     
;;;1839     /* Check the parameters */
;;;1840     assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
;;;1841     
;;;1842     tmpreg = RCC->DCKCFGR;
000002  680a              LDR      r2,[r1,#0]
;;;1843   
;;;1844     /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
;;;1845     tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
;;;1846   
;;;1847     /* Set PLLSAIDIVQ values */
;;;1848     tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
000004  f06f03ff          MVN      r3,#0xff
000008  f42252f8          BIC      r2,r2,#0x1f00         ;1845
00000c  eb032000          ADD      r0,r3,r0,LSL #8
000010  4310              ORRS     r0,r0,r2
;;;1849   
;;;1850     /* Store the new value */
;;;1851     RCC->DCKCFGR = tmpreg;
000012  6008              STR      r0,[r1,#0]
;;;1852   }
000014  4770              BX       lr
;;;1853   
                          ENDP

000016  0000              DCW      0x0000
                  |L45.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;1148     */
;;;1149   void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4a03              LDR      r2,|L46.16|
;;;1150   {
;;;1151     uint32_t tmpreg = 0;
;;;1152   
;;;1153     /* Check the parameters */
;;;1154     assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;1155   
;;;1156     tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;1157   
;;;1158     /* Clear SW[1:0] bits */
;;;1159     tmpreg &= ~RCC_CFGR_SW;
000004  f0210103          BIC      r1,r1,#3
;;;1160   
;;;1161     /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;1162     tmpreg |= RCC_SYSCLKSource;
000008  4301              ORRS     r1,r1,r0
;;;1163   
;;;1164     /* Store the new value */
;;;1165     RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;1166   }
00000c  4770              BX       lr
;;;1167   
                          ENDP

00000e  0000              DCW      0x0000
                  |L46.16|
                          DCD      0x40023808

                          AREA ||i.RCC_TIMCLKPresConfig||, CODE, READONLY, ALIGN=2

                  RCC_TIMCLKPresConfig PROC
;;;2061     */
;;;2062   void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
000000  4901              LDR      r1,|L47.8|
;;;2063   {
;;;2064     /* Check the parameters */
;;;2065     assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
;;;2066   
;;;2067     *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
000002  f8c101e0          STR      r0,[r1,#0x1e0]
;;;2068   }
000006  4770              BX       lr
;;;2069   
                          ENDP

                  |L47.8|
                          DCD      0x42471000

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;307      */
;;;308    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b518              PUSH     {r3,r4,lr}
;;;309    {
;;;310      __IO uint32_t startupcounter = 0;
000002  2000              MOVS     r0,#0
;;;311      ErrorStatus status = ERROR;
;;;312      FlagStatus hsestatus = RESET;
;;;313      /* Wait till HSE is ready and if Time out is reached exit */
;;;314      do
;;;315      {
;;;316        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
;;;317        startupcounter++;
;;;318      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
000004  f44f44a0          MOV      r4,#0x5000
000008  9000              STR      r0,[sp,#0]
                  |L48.10|
00000a  2031              MOVS     r0,#0x31              ;316
00000c  f7fffffe          BL       RCC_GetFlagStatus
000010  9900              LDR      r1,[sp,#0]            ;317
000012  1c49              ADDS     r1,r1,#1              ;317
000014  9100              STR      r1,[sp,#0]
000016  42a1              CMP      r1,r4
000018  d001              BEQ      |L48.30|
00001a  2800              CMP      r0,#0
00001c  d0f5              BEQ      |L48.10|
                  |L48.30|
;;;319    
;;;320      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
00001e  2031              MOVS     r0,#0x31
000020  f7fffffe          BL       RCC_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d000              BEQ      |L48.42|
;;;321      {
;;;322        status = SUCCESS;
000028  2001              MOVS     r0,#1
                  |L48.42|
;;;323      }
;;;324      else
;;;325      {
;;;326        status = ERROR;
;;;327      }
;;;328      return (status);
;;;329    }
00002a  bd18              POP      {r3,r4,pc}
;;;330    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 144
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
